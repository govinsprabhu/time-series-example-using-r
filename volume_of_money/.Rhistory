moving_average_ts = ts(moving_average)
par(mfrow=c(2,1))
plot(moving_average_ts, main='time series ', xlab='days')
(acf(moving_average_ts, main='Moving average of a process of order 2'))
noise = rnorm(10000)
moving_average = NULL
for (i in 3: 10000){
moving_average[i] =noise[i] +  0.5 * noise[i - 1] + 0.5 * noise[i - 2]
}
moving_average = moving_average[3:10000]
moving_average_ts = ts(moving_average)
par(mfrow=c(2,1))
plot(moving_average_ts, main='time series ', xlab='days')
(acf(moving_average_ts, main='Moving average of a process of order 2'))
noise = rnorm(10000)
moving_average = NULL
for (i in 3: 10000){
moving_average[i] =noise[i] +  0.5 * noise[i - 1] + 0.5 * noise[i - 2]
}
moving_average = moving_average[3:10000]
moving_average_ts = ts(moving_average)
par(mfrow=c(2,1))
plot(moving_average_ts, main='time series ', xlab='days')
(acf(moving_average_ts, main='Moving average of a process of order 2'))
noise = rnorm(10000)
moving_average = NULL
for (i in 3: 10000){
moving_average[i] =noise[i] +  0.5 * noise[i - 1] + 0.5 * noise[i - 2]
}
moving_average = moving_average[3:10000]
moving_average_ts = ts(moving_average)
par(mfrow=c(2,1))
plot(moving_average_ts, main='time series ', xlab='days')
(acf(moving_average_ts, main='Moving average of a process of order 2'))
noise = rnorm(10000)
moving_average = NULL
for (i in 3: 10000){
moving_average[i] =noise[i] +  0.5 * noise[i - 1] + 0.5 * noise[i - 2]
}
moving_average = moving_average[3:10000]
moving_average_ts = ts(moving_average)
par(mfrow=c(2,1))
plot(moving_average_ts, main='time series ', xlab='days')
(acf(moving_average_ts, main='Moving average of a process of order 2'))
noise = rnorm(100000)
moving_average = NULL
for (i in 3: 100000){
moving_average[i] =noise[i] +  0.5 * noise[i - 1] + 0.5 * noise[i - 2]
}
moving_average = moving_average[3:100000]
moving_average_ts = ts(moving_average)
par(mfrow=c(2,1))
plot(moving_average_ts, main='time series ', xlab='days')
(acf(moving_average_ts, main='Moving average of a process of order 2'))
noise = rnorm(100000)
moving_average = NULL
for (i in 3: 100000){
moving_average[i] =noise[i] +  0.5 * noise[i - 1] + 0.5 * noise[i - 2]
}
moving_average = moving_average[3:100000]
moving_average_ts = ts(moving_average)
par(mfrow=c(2,1))
plot(moving_average_ts, main='time series ', xlab='days')
(acf(moving_average_ts, main='Moving average of a process of order 2'))
(acf(moving_average_ts, main='Moving average of a process of order 2'))
set.seed(2016)
N= 1000
phi = 0.4
z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
plot(x)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
plot(X)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
acf(X.acf)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
acf(X.ts)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(x.acf)
set.seed(2016)
N= 1000
phi = 1
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(x.acf)
set.seed(2016)
N= 1000
phi = 1
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(X.acf)
set.seed(2016)
N= 1000
phi = 1
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(X.acf)
#alternative
set.seed(2016)
X.ts = arima.sim(list(ar=c(.7,.2)), n= 1000)
par(mfrow=c(2,1))
plot(X.ts, main = 'AR(2) time seris, phi1=.7, phi2=.2')
X.acf= acf(X.ts, main = 'Autocorrelation of AR(2) time series')
set.seed(2016)
X.ts = arima.sim(list(ar=c(.7,.2)), n= 1000)
par(mfrow=c(2,1))
plot(X.ts, main = 'AR(2) time seris, phi1=.7, phi2=.2')
X.acf= acf(X.ts, main = 'Autocorrelation of AR(2) time series')
setwd("~/ML/time_series/monthly_sales_for_souvenir_shop")
my.data = read.csv('monthly-sales-for-souvenir-sho.csv')
my.data = read.csv('monthly-sales-for-a-souvenir-sho.csv')
plot(my.data)
names(my.data)
colnames(my.data)
colnames(my.data$Monthly.sales.for.a.souvenir.shop.on.the.wharf.at.a.beach.resort.town.in.Queensland..Australia..Jan.1987.Dec.1993)
plot(my.data$Monthly.sales.for.a.souvenir.shop.on.the.wharf.at.a.beach.resort.town.in.Queensland..Australia..Jan.1987.Dec.1993)
plot.ts(my.data$Monthly.sales.for.a.souvenir.shop.on.the.wharf.at.a.beach.resort.town.in.Queensland..Australia..Jan.1987.Dec.1993)
my.data = read.csv('monthly-sales-for-a-souvenir-sho.csv')
names(my.data)
plot.ts(my.data$Monthly.sales.for.a.souvenir.shop.on.the.wharf.at.a.beach.resort.town.in.Queensland..Australia..Jan.1987.Dec.1993)
my.data = read.csv('monthly-sales-for-a-souvenir-sho.csv')
names(my.data)
plot.ts(my.data$Sales)
plot(my.data.sales)
my.data.sales = my.data$Sales
plot(my.data.sales)
my.data.sales = ts(my.data$Sales)
plot(my.data.sales)
acf(my.data.sales)
plot(diff(my.data.sales))
plot(diff(log(my.data.sales)))
plot(diff(diff(log(my.data.sales)), 12))
data = diff(diff(log(my.data.sales)), 12)
acf2(data)
library(astsa)
library(forcats)
data = diff(diff(log(my.data.sales)), 12)
acf2(data)
acf2(data, 50)
my.data = read.csv('monthly-sales-for-a-souvenir-sho.csv')
names(my.data)
plot.ts(my.data$Sales)
my.data.sales = ts(my.data$Sales)
plot(my.data.sales)
#Diff
plot(diff(my.data.sales))
plot(diff(log(my.data.sales)))
plot(diff(diff(log(my.data.sales)), 12))
library(astsa)
library(forcats)
data = diff(diff(log(my.data.sales)), 12)
acf2(data, 50)
d = 1
period = 12
D = 1
for (p in (1 : 2)){
for (q in (1 : 2)){
for (i in (1 : 2)){
for (j in (1: 4)){
if (p + q + d + D + i + j <= 6){
model = arima(x = log(x), order = c(p - 1, d, q - 1), seasonal = list(order = c((i - 1), D, (j - 1)), period = period))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals ^ 2)
cat(p- 1, d, q - 1, i - 1, D, j - 1, period, 'AIC ', model$aic, 'SSE ', sse, 'p-value', pval$p.value, '\n')
}
}
}
}
}
my.data = read.csv('monthly-sales-for-a-souvenir-sho.csv')
names(my.data)
plot.ts(my.data$Sales)
my.data.sales = ts(my.data$Sales)
plot(my.data.sales)
#Diff
plot(diff(my.data.sales))
plot(diff(log(my.data.sales)))
plot(diff(diff(log(my.data.sales)), 12))
library(astsa)
library(forcats)
data = diff(diff(log(my.data.sales)), 12)
acf2(data, 50)
d = 1
period = 12
D = 1
for (p in (1 : 2)){
for (q in (1 : 2)){
for (i in (1 : 2)){
for (j in (1: 4)){
if (p + q + d + D + i + j <= 6){
model = arima(x = log(my.data$Sales), order = c(p - 1, d, q - 1), seasonal = list(order = c((i - 1), D, (j - 1)), period = period))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals ^ 2)
cat(p- 1, d, q - 1, i - 1, D, j - 1, period, 'AIC ', model$aic, 'SSE ', sse, 'p-value', pval$p.value, '\n')
}
}
}
}
}
my.data = read.csv('monthly-sales-for-a-souvenir-sho.csv')
names(my.data)
plot.ts(my.data$Sales)
my.data.sales = ts(my.data$Sales)
plot(my.data.sales)
#Diff
plot(diff(my.data.sales))
plot(diff(log(my.data.sales)))
plot(diff(diff(log(my.data.sales)), 12))
library(astsa)
library(forcats)
data = diff(diff(log(my.data.sales)), 12)
acf2(data, 50)
d = 1
period = 12
D = 1
for (p in (1 : 2)){
for (q in (1 : 2)){
for (i in (1 : 2)){
for (j in (1: 4)){
if (p + q + d + D + i + j <= 10){
model = arima(x = log(my.data$Sales), order = c(p - 1, d, q - 1), seasonal = list(order = c((i - 1), D, (j - 1)), period = period))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals ^ 2)
cat(p- 1, d, q - 1, i - 1, D, j - 1, period, 'AIC ', model$aic, 'SSE ', sse, 'p-value', pval$p.value, '\n')
}
}
}
}
}
my.data = read.csv('monthly-sales-for-a-souvenir-sho.csv')
names(my.data)
plot.ts(my.data$Sales)
my.data.sales = ts(my.data$Sales)
plot(my.data.sales)
#Diff
plot(diff(my.data.sales))
plot(diff(log(my.data.sales)))
plot(diff(diff(log(my.data.sales)), 12))
library(astsa)
library(forcats)
data = diff(diff(log(my.data.sales)), 12)
acf2(data, 50)
d = 1
period = 12
D = 1
for (p in (1 : 2)){
for (q in (1 : 2)){
for (i in (1 : 2)){
for (j in (1: 4)){
if (p + q + d + D + i + j <= 10){
model = arima(x = log(my.data.sales), order = c(p - 1, d, q - 1), seasonal = list(order = c((i - 1), D, (j - 1)), period = period))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals ^ 2)
cat(p- 1, d, q - 1, i - 1, D, j - 1, period, 'AIC ', model$aic, 'SSE ', sse, 'p-value', pval$p.value, '\n')
}
}
}
}
}
model = arima(log(my.data.sales), order = c(1, 1, 0), seasonal = list(order = (0, 1, 1), period = 12))
model = arima(log(my.data.sales), order = c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 12))
plot(forcats(model))
library(forcats)
plot(forcat(model))
model = arima(log(my.data.sales), order = c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 12))
plot(forecat(model))
model = arima(log(my.data.sales), order = c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 12))
plot(forecast(model))
library(forecast)
model = arima(log(my.data.sales), order = c(1, 1, 0), seasonal = list(order = c(0, 1, 1), period = 12))
plot(forecast(model))
sarima = sarima(my.data.sales, 1, 1, 0, 0, 1, 1)
sarima = sarima(my.data.sales, 1, 1, 0, 0, 1, 1, 12)
sarima = sarima(log(my.data.sales), 1, 1, 0, 0, 1, 1, 12)
sarima = sarima(log(my.data.sales), 1, 1, 0, 0, 1, 1, 12)
plot(c(my.data.sales, sarima), main = 'Monlthly sales + forecast')
sarima = sarima(log(my.data.sales), 1, 1, 0, 0, 1, 1, 12)
plot(c(my.data.sales, exp(sarima$pred)), main = 'Monlthly sales + forecast')
plot.ts(c(my.data.sales, exp(sarima$pred)), main = 'Monlthly sales + forecast')
sarima = sarima(log(my.data.sales), 1, 1, 0, 0, 1, 1, 12)
sarima = sarima.for(log(my.data.sales), 1, 1, 0, 0, 1, 1, 12)
sarima = sarima.for(log(my.data.sales),12, 1, 1, 0, 0, 1, 1, 12)
plot.ts(c(my.data.sales, exp(sarima$pred)), main = 'Monlthly sales + forecast')
sarima(log(my.data.sales), 1, 1, 0, 0, 1, 1, 12)
data = diff(diff(USAccDeaths, 12))
plot(data)
acf(data)
pacf(data)
acf(data, 50)
pacf(data, 50)
acf(data, 50)
rm(list=ls(all=TRUE))rain.data
rm(list=ls(all=TRUE))
rain.data
scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat", skip = 1)
rain.data = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat", skip = 1)
rain.ts = ts(rain.data)
rain.ts = ts(rain.data)
plot(rain.ts)
library(forecast)
auto.arima(rain.ts)
aCF(rain.ts)
acf(rain.ts)
hist(rain.ts)
qqnorm(rain.ts)
rm(list=ls(all=TRUE))
rain.data = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat", skip = 1)
rain.ts = ts(rain.data)
plot(rain.ts)
library(forecast)
auto.arima(rain.ts)
acf(rain.ts)
hist(rain.ts)
alpha = 0.2
forecast.arr = NULL
n = length(rain.data)
forecast.arr[1] = rain.data[1]
for (i in (2:n)){
forecast.arr[i] = alpha * rain.data[i - 1] + (1 - alpha) * forecast.arr[i - 1]
}
plot(forecast.arr)
data = read.csv('volume-of-money-abs-definition-m.csv')
setwd("~/ML/time_series/volume_of_money")
data = read.csv('volume-of-money-abs-definition-m.csv')
data.money = data$Volume.of.money..ABS.definition.m1..Feb.1960...Dec.1994
data.money = ts(data$Volume.of.money..ABS.definition.m1..Feb.1960...Dec.1994)
plot(data.money)
data.money = ts(data$Volume.of.money..ABS.definition.m1..Feb.1960...Dec.1994, frequency = 12)
plot(data.money)
data.money = ts(data$Volume.of.money..ABS.definition.m1..Feb.1960...Dec.1994,start =(1962, 2)  ,frequency = 12)
plot(data.money)
data.money = ts(data$Volume.of.money..ABS.definition.m1..Feb.1960...Dec.1994,start =c(1962, 2)  ,frequency = 12)
plot(data.money)
)
plot(data
plot(data)
plot(data)
plot(data)
plot(data)
data.money = ts(data$Volume.of.money..ABS.definition.m1..Feb.1960...Dec.1994,start =c(1962, 2)  ,frequency = 12)
plot(data.money)
HoltWinters(data.money)
HoltWinters(data.money, gamma = False
HoltWinters(data.money, gamma = False)
HoltWinters(data.money, gamma = False)
HoltWinters(data.money, gamma = FALSE)
plot(AirPassengers)
