N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = X[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
acf(X)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
acf(X.acf)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
acf(X.ts)
set.seed(2016)
N= 1000
phi = 0.4
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(x.acf)
set.seed(2016)
N= 1000
phi = 1
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(x.acf)
set.seed(2016)
N= 1000
phi = 1
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(X.acf)
set.seed(2016)
N= 1000
phi = 1
Z = rnorm(N, 0, 1)
X=NULL
X[1] = Z[1]
for (i in 2:N){
X[i] = Z[i] + phi *X[i - 1]
}
X.ts = ts(X)
plot(X.ts)
par(mfrow=c(2,1))
plot(X.ts, main='Ar(1) time series on white noise, phi = 0.4')
X.acf = acf(X.ts, main="AR(1) time series on white noise, phi = .4")
plot(X.acf)
#alternative
set.seed(2016)
X.ts = arima.sim(list(ar=c(.7,.2)), n= 1000)
par(mfrow=c(2,1))
plot(X.ts, main = 'AR(2) time seris, phi1=.7, phi2=.2')
X.acf= acf(X.ts, main = 'Autocorrelation of AR(2) time series')
set.seed(2016)
X.ts = arima.sim(list(ar=c(.7,.2)), n= 1000)
par(mfrow=c(2,1))
plot(X.ts, main = 'AR(2) time seris, phi1=.7, phi2=.2')
X.acf= acf(X.ts, main = 'Autocorrelation of AR(2) time series')
plot(my.data)
library(astsa)
my.data = JohnsonJohnson
plot(my.data)
library(astsa)
my.data = JohnsonJohnson
plot.ts(my.data)
acf(my.data)
pacf(my.data)
plot.ts(diff(my.data))
acf(my.data)
my.data.diff = diff(my.data)
plot.ts(diff(my.data.diff))
acf(diff(my.data.diff)
plot.ts(diff(my.data.diff))
acf(diff(my.data.diff)
acf(my.data.diff)
acf(my.data.diff)
library(astsa)
my.data = JohnsonJohnson
plot.ts(my.data)
acf(my.data)
pacf(my.data)
my.data.diff = diff(log(my.data))
plot.ts(diff(my.data.diff))
acf(my.data.diff)
plot.ts(diff(my.data.diff))
acf(my.data.diff)
pacf(my.data.diff)
plot(diff(my.data.diff, 4))
my.data.seasonal = diff(my.data.diff, 4)
plot(my.data.seasonal)
acf(my.data.seasonal)
pacf(my.data.seasonal)
acf(my.data.seasonal)
pacf(my.data.seasonal)
acf(my.data.seasonal)
library(astsa)
d=1
DD=1
per=4
for(p in 1:2){
for(q in 1:2){
for(i in 1:2){
for(j in 1:2){
if(p+d+q+i+DD+j<=10){
model<-arima(x=log(jj), order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
plot(jj)
library(astsa)
my.data = log(jj)
d= 1
period = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1)))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval)
}
}
}
}
}
library(astsa)
my.data = log(jj)
d= 1
period = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1)))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
library(astsa)
my.data = log(jj)
d= 1
period = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1)), period = period)
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
library(astsa)
my.data = log(jj)
d= 1
period = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = period))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
library(astsa)
my.data = log(jj)
d= 1
per = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = per))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
library(astsa)
my.data = log(jj)
d= 1
per = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(x = my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = per))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
sarima(my.data, 0, 1, 1, 1, 0, 0)
library(astsa)
my.data = log(jj)
d= 1
per = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(x = my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = per))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
sarima(my.data, 0, 1, 1, 1, 0, 0)
library(astsa)
my.data = log(jj)
d= 1
per = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(x = my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = per))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
sarima(log(jj), 0, 1, 1, 1, 0, 0)
sarima(log(jj), 0, 1, 1, 1, 0, 1, 4)
library(astsa)
my.data = log(jj)
d= 1
per = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(x = my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = per))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D - 1, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
sarima(log(jj), 0, 1, 1, 1, 0, 1, 4)
library(astsa)
my.data = log(jj)
d= 1
per = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(x = my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = per))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
sarima(log(jj), 0, 1, 1, 1, 0, 1, 4)
library(astsa)
my.data = log(jj)
d= 1
per = 4
D = 1
for (p in (1: 2)){
for (q in (1 : 2)){
for (i in (1: 2)){
for (j in (1: 2)){
if (i + j + p + q + d + D <= 10 ){
model = arima(x = my.data, order=c(p - 1, d, q - 1), seasonal = list(order = c(i - 1, D, j - 1), period = per))
pval = Box.test(model$residuals, lag = log(length(model$residuals)))
sse = sum(model$residuals^2)
cat(p - 1, d, q - 1, i - 1, D, j - 1, 'AIC=', model$aic, 'sse', sse,'p-value', pval$p.value, '\n')
}
}
}
}
}
sarima(log(jj), 0, 1, 1, 1, 1, 1, 4)
model = sarima(log(jj), 0, 1, 1, 1, 1, 1, 4)
forecast(model)
install.packages("forcast")
setwd("~/ML/time_series/monthly_milk_production")
data = read.csv('monthly-milk-production-pounds-p.csv')
data = read.csv('monthly-milk-production-pounds-p.csv')
plot(data)
data = read.csv('monthly-milk-production-pounds-p.csv')
plot(data)
acf(data)
data = read.csv('monthly-milk-production-pounds-p.csv')
data = ts(data)
plot(data)
acf(data)
data = read.csv('monthly-milk-production-pounds-p.csv')
data = ts(data)
plot(data)
data = read.csv('monthly-milk-production-pounds-p.csv')
data = ts(data)
data = read.csv('monthly-milk-production-pounds-p.csv')
colnames(data)
data = ts(data)
plot(data$)
plot(data$Monthly.milk.production..pounds.per.cow..Jan.62...Dec.75)
data = ts(data$Monthly.milk.production..pounds.per.cow..Jan.62...Dec.75)
colnames(data$Monthly.milk.production..pounds.per.cow..Jan.62...Dec.75)
data = read.csv('monthly-milk-production-pounds-p.csv')
data = read.csv('monthly-milk-production-pounds-p.csv')
milk = data$Monthly.milk.production..pounds.per.cow..Jan.62...Dec.75
plot(milk)
plot.ts(milk)
plot.ts(diff(milk))
plot.ts(diff(milk,1))
plot.ts(diff(diff(milk), 1))
plot.ts(diff(diff(milk), 12))
plot.ts(milk.diff)
milk.diff = diff(diff(milk), 12)
plot.ts(milk.diff)
acf(milk.diff)
acf(milk.diff)
dev.new(width = 4, height = 4)
acf(milk.diff)
milk.diff = ts(diff(diff(milk), 12))
plot.ts(milk.diff)
dev.new(width = 4, height = 4)
dev.new(width = 4, height = 4)
acf(milk.diff)
plot.ts(milk.diff)
plot.ts(milk)
milk.diff = ts(diff(diff(milk), 12))
plot.ts(milk.diff)
dev.new(width = 4, height = 4)
acf(milk.diff)
acf(ts(milk.diff))
acf(milk.diff)
acf(milk.diff, na.action = na.pass)
acf(milk.diff, na.action = na.pass)
pacf(milk.diff, na.action = na.pass)
acf(milk.diff, na.action = na.pass)
sarima(Milk, 0,1,0,0,1,1,12)
library(astsa)
sarima(milk.diff, 0,1,0,0,1,1,12)
data = read.csv('monthly-milk-production-pounds-p.csv')
milk = data$Monthly.milk.production..pounds.per.cow..Jan.62...Dec.75
plot.ts(milk)
milk.diff = ts(diff(diff(milk), 12))
plot.ts(milk.diff)
acf(milk.diff, na.action = na.pass)
pacf(milk.diff, na.action = na.pass)
library(astsa)
sarima(milk.diff, 0,1,0,0,1,1,12)
library(astsa)
library(forecast)
d=NULL
DD=NULL
d=1
DD=1
per=12
for(p in 1:1){
for(q in 1:1){
for(i in 1:3){
for(j in 1:4){
if(p+d+q+i+DD+j<=10){
model<-arima(x=milk.diff, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model<- arima(x=Milk, order = c(0,1,0), seasonal = list(order=c(0,1,1), period=12))
plot(forecast(model))
forecast(model)
model<- arima(x=milk.diff, order = c(0,1,0), seasonal = list(order=c(0,1,1), period=12))
plot(forecast(model))
forecast(model)
model<- arima(x=milk, order = c(0,1,0), seasonal = list(order=c(0,1,1), period=12))
plot(forecast(model))
forecast(model)
